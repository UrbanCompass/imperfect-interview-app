import {
  Person as PersonType,
  Agent as AgentType,
  Team as TeamType,
} from '@uc/thrift2npme/dist/people/api/person';
import { Media as MediaType } from '@uc/thrift2npme/dist/translation_common/media';
import { SetStateAction, Dispatch } from 'react';
import {
  Location,
  ProcessedListing,
} from '@uc/thrift2npme/dist/listing_translation/processed_listing';
import { ListingStatus } from '@uc/thrift2npme/dist/listing/listing_status';
import { Item as ItemType } from '@/components/common/Select/Select';

export { ContactInfo } from '@uc/thrift2npme/dist/contact_info/contact_info';
export { IMAGES_LOADED_EVENT_NAME } from '@uc/thrift2npme/dist/export_cdp/export_cdp_models.js';
export { ListingType, RentalStatus, SaleStatus } from '@uc/thrift2npme/dist/listing/listing';
export {
  ListingDetailsCategory,
  ListingDetailsSubCategory,
} from '@uc/thrift2npme/dist/listing_translation/processed_listing_details';
export { MediaCategory } from '@uc/thrift2npme/dist/translation_common/media';
export { DocumentMetadata } from '@uc/thrift2npme/dist/docstore/docstore';
export { NYC_GEO_ID } from '@uc/thrift2npme/dist/geography/common';
export {
  JobStatus,
  ClipType,
  VideoClip,
  CreateGenerateVideoJobRequest,
  CreateGenerateVideoJobResponse,
  LookupGenerateVideoJobStatusRequest,
  LookupGenerateVideoJobStatusResponse,
} from '@uc/thrift2npme/dist/ai_video_generator/ai_video_generator_service';
export { AdType } from '@uc/thrift2npme/dist/digital_ad/digital_ad_models';
export { AssetType } from '@uc/thrift2npme/dist/asset_library/asset_library_models';
export { FILTER_REASON, SORT_ORDER } from '@uc/thrift2npme/dist/search/search';
export { ListingStatus };
export { Location, ProcessedListing };

interface SegmentProperties {
  product: string;
  [key: string]: unknown;
}

declare global {
  // eslint-disable-next-line @typescript-eslint/no-namespace
  namespace NodeJS {
    interface Global {
      document: Document;
      window: Window;
      navigator: Navigator;
    }
  }
  interface Window {
    analytics?: {
      track: (name: string, properties: SegmentProperties) => void;
    };
    uc: Globals;
  }
}

// API types

export {
  Category,
  CategorizingStrategy,
  SearchSuggestRequestV2,
  SearchSuggestResponseV2,
  Suggestion,
  SuggestionSource,
} from '@uc/thrift2npme/dist/search_suggest/search_suggest_model_v2';
export { GetPeopleResponse, GetPeopleRequest } from '@uc/thrift2npme/dist/people/people_service';
export { PersonProfileType } from '@uc/thrift2npme/dist/people/people_models';

export { Logo, LogoStatus } from '@uc/thrift2npme/dist/logo_repo/logo_repo_models';
export {
  GetLogosRequest,
  GetLogosResponse,
} from '@uc/thrift2npme/dist/logo_repo/logo_repo_service';

export {
  Canvas,
  CanvasType,
  DesignType,
} from '@uc/thrift2npme/dist/design_studio/design_studio_models';
export {
  CreateCanvasRequest,
  GetCanvasResponse,
  UpdateCanvasRequest,
} from '@uc/thrift2npme/dist/design_studio/design_studio_service';

export type Opty = Record<string, Record<string, boolean>>;
export type Person = PersonType;
export type Team = TeamType;

export interface GlobalUser extends PersonType {
  agentProfile?: AgentType;
}

export interface Globals {
  user?: GlobalUser;
  opty?: Opty;
}

export enum ListingAttribute {
  SQFT,
  PRICE,
  BEDS,
  BATHS,
  STATUS,
}

export enum VideoType {
  UNSET = '[placeholder]',
  LISTING = 'listing',
  BRANDING = 'branding',
}

export type ListingStatusFilter = ListingStatus | -1;

export interface AgentInfo {
  name: string;
  details: string;
  agentAvatarUrl?: string;
  agentLogoUrl?: string;
}

// https://github.com/webpack/webpack/issues/7378#issuecomment-492641148
// Export TS interfaces/types so that it comply with TS's isolatedModules=true
export type Item = ItemType;

export interface Address {
  title: string;
  subtitle: string;
}

export interface Media extends MediaType {
  isCustomUpload: boolean;
  showFootage: boolean;
  note: string;
  textSource?: ListingAttribute;
  index: string;
}

export interface Preferences {
  showAgentBranding: boolean;
  showCompassLogo: boolean;
}

export interface MusicTrack {
  label: string;
  name: string;
}

export interface MusicCategory {
  label: string;
  name: string;
  tracks: MusicTrack[];
}

export interface GlobalContextValue extends Globals {
  team: Team | null;
  listingIdSHA: string | null;
  digitalAdId: string | null;
  agentInfo: AgentInfo;
  setAgentInfo: Dispatch<SetStateAction<AgentInfo>>;
}

export interface StateContextValue {
  address: Address;
  autoGenerated: boolean;
  customUploads: Media[];
  listings: ProcessedListing[];
  listingStatusFilter: ListingStatusFilter;
  media: Media[];
  music: MusicTrack | null;
  preferences: Preferences;
  videoUrl: string | null;
  thumbnailUri: string | null;
  videoType: VideoType;
  canvasId: string | null;
  setAddress: Dispatch<SetStateAction<Address>>;
  setAutoGenerated: Dispatch<SetStateAction<boolean>>;
  setCustomUploads: Dispatch<SetStateAction<Media[]>>;
  setListings: Dispatch<SetStateAction<ProcessedListing[]>>;
  setListingStatusFilter: Dispatch<SetStateAction<ListingStatusFilter>>;
  setMedia: Dispatch<SetStateAction<Media[]>>;
  setMusic: Dispatch<SetStateAction<MusicTrack | null>>;
  setPreferences: Dispatch<SetStateAction<Preferences>>;
  setStage: Dispatch<SetStateAction<string>>;
  setVideoUrl: Dispatch<SetStateAction<string | null>>;
  setThumbnailUri: Dispatch<SetStateAction<string | null>>;
  setVideoType: Dispatch<SetStateAction<VideoType>>;
  setCanvasId: Dispatch<SetStateAction<string | null>>;
}
