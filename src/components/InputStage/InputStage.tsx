import React, { useEffect, useState } from 'react';
import styled from '@emotion/styled';
import ListingCard from '@uc/listing-card.react';
import { Button, LoadingSpinner, Toast, Select as CompassSelect } from '@uc/cx.react';

import { Centered, Content, Header, Select, SquareImage } from '@/components/common';
import {
  Category,
  CategorizingStrategy,
  Item,
  ListingType,
  SearchSuggestRequestV2,
  SearchSuggestResponseV2,
  Suggestion,
  SuggestionSource,
  NYC_GEO_ID,
  GlobalContextValue,
  StateContextValue,
  VideoType,
} from '@/types';
import { omniSuggestAutoComplete, loadListings } from '@/api';
import { useGlobalContext, useStateContext } from '@/hooks';
import {
  trackAutoGenerateClicked,
  trackCreateCustomClicked,
  trackCreateCustomBrandingClicked,
  formatAgentDetails,
  getDefaultAddress,
  trackHomepageViewed,
  trackListingSelected,
} from '@/utils';
import { NUM_IMAGES_REQUIRED, STAGE } from '@/constants';
import { ListingStatusSelect } from '../common/ListingStatusSelect';

const LISTING_RESULT_LIMIT = 5;

const Column = styled.div`
  margin: auto 60px;
`;
Column.displayName = 'Column';

const SelectWrapper = styled.div`
  margin: 20px 0;
  position: relative;
  width: 358px;
`;
SelectWrapper.displayName = 'SelectWrapper';

const ListingPlaceholder = styled.div`
  align-items: center;
  display: flex;
  height: 248px;
  justify-content: center;
  width: 358px;
`;
ListingPlaceholder.displayName = 'ListingPlaceholder';

export function makeLoadProps(
  selectedGeoId: string | undefined
): (val: string) => SearchSuggestRequestV2 {
  return function loadProps(value: string): SearchSuggestRequestV2 {
    return {
      q: value,
      sources: [SuggestionSource.ADDRESS],
      listingTypes: [ListingType.LISTING, ListingType.SALES, ListingType.SHORT_TERM_RENTAL],
      includeAgentSearchableSuggestions: true,
      categorizingStrategy: CategorizingStrategy.PROFESSIONAL,
      limitToGeos: [selectedGeoId || NYC_GEO_ID],
      limit: LISTING_RESULT_LIMIT,
    };
  };
}

export function transformToItems(response: SearchSuggestResponseV2): Item[] {
  const items: Item[] = [];
  response?.categories?.forEach((category: Category) => {
    category?.items?.forEach((suggestion: Suggestion) => {
      const address = suggestion.text;
      const { id } = suggestion;
      if (address && id) {
        items.push({ id, value: address });
      }
    });
  });
  return items;
}

export function InputStage(): JSX.Element {
  const {
    user = {},
    team = {},
    opty,
    agentInfo,
    setAgentInfo,
    listingIdSHA,
    digitalAdId,
  } = useGlobalContext() as GlobalContextValue;
  const {
    listings,
    videoType,
    listingStatusFilter,
    setListings,
    setMedia,
    setAddress,
    setStage,
    setAutoGenerated,
    setVideoType,
    setCanvasId,
    setListingStatusFilter,
  } = useStateContext() as StateContextValue;
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  async function loadListing(id): Promise<void> {
    try {
      const loadListingsResponse = await loadListings({
        listingIdSHAs: [id],
      });
      if (loadListingsResponse.listings == null || loadListingsResponse.listings.length === 0) {
        throw new Error(`No listing data found for id "${id}".`);
      }
      const fullListing = loadListingsResponse.listings[0];
      setLoading(false);
      setListings([fullListing]);

      const { location } = fullListing;
      if (location) {
        setAddress(getDefaultAddress(location));

        // Add the agent's DRE number (for California only) now that we know
        // the geo of the selected listing.
        const updatedDetails = formatAgentDetails(user, team, location);
        setAgentInfo({
          ...agentInfo,
          details: updatedDetails,
        });
      }
    } catch (_) {
      if (digitalAdId) {
        setError('Something went wrong. Please go back to Digital Ads and try again');
      } else {
        setError('Something went wrong. Please refresh the page and try again');
      }
    }
  }

  async function handleAddListing(selectedListing, { clearSelection }): Promise<void> {
    clearSelection();
    setListings([]);
    setMedia([]);
    setCanvasId(null);
    if (selectedListing) {
      setError('');
      setLoading(true);
      trackListingSelected(selectedListing.id);
      loadListing(selectedListing.id);
    }
  }

  const fetchDataProps = {
    makeLoadProps: makeLoadProps(user.selectedGeoId),
    transformToItems,
    loadFn: omniSuggestAutoComplete,
  };

  useEffect(() => {
    // Support ?listingIdSHA query param
    if (listingIdSHA) {
      setVideoType(VideoType.LISTING);
      loadListing(listingIdSHA);
    }
  }, []);

  useEffect(() => {
    if (videoType === VideoType.LISTING) {
      if (
        listings.length > 0 &&
        (listings[0].media == null || listings[0].media.length < NUM_IMAGES_REQUIRED)
      ) {
        setError(
          'This listing doesnt have the requisite number of images. Please select another listing'
        );
      }
    } else if (videoType === VideoType.BRANDING && listingStatusFilter !== -1) {
      if (
        listings.reduce((mediaCount, listing) => mediaCount + listing.media!.length, 0) <
        NUM_IMAGES_REQUIRED
      ) {
        setError('You donâ€™t have enough content to generate this type of branding video.');
      } else {
        setError('');
      }
    }
  }, [videoType, listings]);

  useEffect(() => {
    trackHomepageViewed();
  }, []);

  const selectListingNode = (
    <SelectWrapper>
      <Select
        inputId="add-listing"
        placeholder="Search for a listing by address"
        onChange={handleAddListing}
        fetchDataProps={fetchDataProps}
        autoFocus={true}
        inputStyle={{ padding: '8px' }}
      />
    </SelectWrapper>
  );

  return (
    <>
      <Centered css={{ display: 'flex' }}>
        <Column>
          <SquareImage
            imageUrl="/ucfe-assets/listing-video-editor/eks-2020-05-07-15-38-6cb1eee/homepage-image.png"
            width={550}
          />
        </Column>
        <Column css={{ width: '500px' }}>
          <Header className="textIntent-headline1" css={{ marginTop: '0' }}>
            Create Your Listing Video
          </Header>
          <Content className="textIntent-body" css={{ marginBottom: '35px' }}>
            Create exposure for your listings and grow your business with this easy-to-use tool. The
            Listing Video Generator allows you to generate videos from listing images in a single
            click or you can create custom videos in a few minutes.
          </Content>
          {!digitalAdId &&
            (opty?.features?.video_generator_agent_branding_video ? (
              <>
                <h3 className="textIntent-title2">Please select a video type</h3>
                <SelectWrapper>
                  <CompassSelect
                    onChange={(evt): void => {
                      setVideoType(evt.target.value as VideoType);
                      setListings([]);
                    }}
                    value={videoType}
                    options={[
                      { value: '[placeholder]', label: 'Select' },
                      { value: VideoType.LISTING, label: 'Listing Video' },
                      { value: VideoType.BRANDING, label: 'Branding Video' },
                    ]}
                  />
                </SelectWrapper>
                {videoType === VideoType.LISTING && selectListingNode}
                {videoType === VideoType.BRANDING && (
                  <>
                    <SelectWrapper>
                      <ListingStatusSelect
                        onChange={(evt): void => {
                          setListingStatusFilter(+evt.target.value);
                        }}
                        value={`${listingStatusFilter}`}
                        placeholder="Select"
                      />
                    </SelectWrapper>
                  </>
                )}
              </>
            ) : (
              <>
                <h3 className="textIntent-title2">Please select a listing to continue</h3>
                {selectListingNode}
              </>
            ))}
          {loading && (
            <ListingPlaceholder>
              <LoadingSpinner size="md" />
            </ListingPlaceholder>
          )}
          {videoType === VideoType.LISTING && listings.length > 0 && (
            <>
              {!digitalAdId && <div css={{ margin: '35px 0 10px' }}>Added</div>}
              <div>
                <ListingCard
                  listing={listings[0]}
                  size="sm"
                  isAgent={true}
                  onListingClick={(): void => {}}
                  css={{ zIndex: 0 }}
                />
              </div>
              <div css={{ marginTop: '32px' }}>
                <Button
                  variant="solid"
                  disabled={!!error}
                  onClick={(): void => {
                    trackAutoGenerateClicked();
                    setAutoGenerated(true);
                    setStage(STAGE.PROGRESS);
                  }}
                  css={{ marginRight: '16px' }}
                >
                  Auto Generate
                </Button>
                <Button
                  variant="enclosed"
                  disabled={!!error}
                  onClick={(): void => {
                    trackCreateCustomClicked();
                    setAutoGenerated(false);
                    setStage(STAGE.SELECT);
                  }}
                >
                  Create Custom
                </Button>
              </div>
            </>
          )}
          {videoType === VideoType.BRANDING && listingStatusFilter !== -1 && listings.length > 0 && (
            <>
              <div css={{ marginTop: '32px' }}>
                <Button
                  variant="enclosed"
                  disabled={!!error}
                  onClick={(): void => {
                    trackCreateCustomBrandingClicked();
                    setAutoGenerated(false);
                    setStage(STAGE.SELECT);
                  }}
                >
                  Create Custom
                </Button>
              </div>
            </>
          )}
        </Column>
      </Centered>
      {error && (
        <Toast isOpen variant="error">
          {error}
        </Toast>
      )}
    </>
  );
}
