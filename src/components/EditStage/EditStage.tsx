import React, { useEffect, useState } from 'react';
import styled from '@emotion/styled';
import { DndProvider } from 'react-dnd-cjs';
import HTML5Backend from 'react-dnd-html5-backend-cjs';
import { Button, TextField } from '@uc/cx.react';

import { ListingDetails, NavBar, Panel, StepIndicator } from '@/components/common';
import { useGlobalContext, useStateContext } from '@/hooks';
import { ListingAttribute, GlobalContextValue, StateContextValue } from '@/types';
import {
  getCardType,
  getInputValue,
  isAddressScreen,
  isAgentBrandingScreen,
  isCompassLogoScreen,
  isSqftEnabled,
  trackAgentBrandingScreenRemoved,
  trackCompassLogoScreenRemoved,
  trackCustomizationPageViewed,
  trackImageRemoved,
  trackImageReordered,
  trackListingAttributeSelected,
  trackVideoCustomized,
} from '@/utils';
import { CARD_TYPE, STAGE } from '@/constants';

import { CardPreview } from './CardPreview';
import { Draggable } from './Draggable';
import { ListingAttributeDropdown } from './ListingAttributeDropdown';
import { OptionsPane } from './OptionsPane';

const AGENT_BRANDING_IMAGE_URL =
  '/ucfe-assets/listing-video-editor/eks-2020-05-07-15-38-6cb1eee/agent-card.png';
const COMPASS_LOGO_IMAGE_URL =
  '/ucfe-assets/listing-video-editor/eks-2020-05-07-15-38-6cb1eee/compass-logo.png';

const STATE_DISCLOSURES_URL =
  'https://compasssupport.zendesk.com/hc/en-us/restricted' +
  '?return_to=https%3A%2F%2Fcompasssupport.zendesk.com%2Fhc%2Fen-us%2Farticles%2F360019818213';

const Controls = styled.div`
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  margin: 20px auto 40px;
  width: 500px;
`;
Controls.displayName = 'Controls';

const PanelHeader = styled.div`
  font: var(--cx-font-shorthandBody);
  padding: 20px;
`;
PanelHeader.displayName = 'PanelHeader';

const MusicCategoryHeader = styled.div`
  border-bottom: 1px solid var(--cx-color-border);
  color: var(--cx-color-mediumNeutral);
  font: var(--cx-font-shorthandXsStrong);
  margin-top: 20px;
  padding: 8px 35px;
  text-align: left;
  text-transform: uppercase;
`;
MusicCategoryHeader.displayName = 'MusicCategoryHeader';

const Disclaimer = styled.div`
  color: var(--cx-color-mediumNeutral);
  font: var(--cx-font-shorthandXs);
`;
Disclaimer.displayName = 'Disclaimer';

export function EditStage(): JSX.Element {
  const { agentInfo, setAgentInfo } = useGlobalContext() as GlobalContextValue;
  const {
    listings,
    address,
    media,
    music,
    preferences,
    autoGenerated,
    videoUrl,
    setStage,
    setAddress,
    setMedia,
    setPreferences,
  } = useStateContext() as StateContextValue;
  const [selectedIndex, setSelectedIndex] = useState(0);

  function handleReorderImage(startIndex: number, endIndex: number): void {
    trackImageReordered(autoGenerated, videoUrl);

    const updatedMedia = [...media];
    const mediaToMove = updatedMedia[startIndex];
    updatedMedia[startIndex] = updatedMedia[endIndex];
    updatedMedia[endIndex] = mediaToMove;
    setMedia(updatedMedia);
  }

  function handleRemoveImage(index: number): void {
    // Handle the special cases.
    if (isAgentBrandingScreen(media, index, preferences)) {
      trackAgentBrandingScreenRemoved(autoGenerated, videoUrl);
      setPreferences({
        ...preferences,
        showAgentBranding: false,
      });
    } else if (isCompassLogoScreen(media, index, preferences)) {
      trackCompassLogoScreenRemoved(autoGenerated, videoUrl);
      setPreferences({
        ...preferences,
        showCompassLogo: false,
      });
    } else {
      trackImageRemoved(autoGenerated, videoUrl);

      // Remove the image from the selected media array.
      const updatedMedia = media.filter((_, i) => i !== index);
      setMedia(updatedMedia);
    }

    // Update the selected index if the last image was removed.
    if (index === selectedIndex && selectedIndex >= media.length - 1) {
      setSelectedIndex(index - 1);
    }
  }

  function handleAddressInput(event: React.ChangeEvent<HTMLInputElement>): void {
    const title = event.target.value || '';
    const updatedAddress = { ...address };
    updatedAddress.title = title;
    setAddress(updatedAddress);
  }

  function handleAddressSubtitleInput(event: React.ChangeEvent<HTMLInputElement>): void {
    const subtitle = event.target.value || '';
    const updatedAddress = { ...address };
    updatedAddress.subtitle = subtitle;
    setAddress(updatedAddress);
  }

  function handleAgentNameInput(event: React.ChangeEvent<HTMLInputElement>): void {
    const newName = event.target.value || '';
    setAgentInfo({ ...agentInfo, name: newName });
  }

  function handleAgentDetailsInput(event: React.ChangeEvent<HTMLTextAreaElement>): void {
    const newDetails = event.target.value || '';
    setAgentInfo({ ...agentInfo, details: newDetails });
  }

  function handleNoteInput(event: React.ChangeEvent<HTMLInputElement>): void {
    const index = event.target.getAttribute('data-index');
    if (index) {
      const note = event.target.value || '';
      const updatedMedia = [...media];
      updatedMedia[index].note = note;
      updatedMedia[index].textSource = undefined;
      setMedia(updatedMedia);
    }
  }

  function handleSetAttributeText(
    index: number,
    attribute: ListingAttribute,
    label: string,
    text: string
  ): void {
    trackListingAttributeSelected(label, autoGenerated, videoUrl);
    const updatedMedia = [...media];
    if (attribute === ListingAttribute.SQFT) {
      // Only one screen can show the square footage at a time.
      updatedMedia.forEach((m) => {
        // Clear the previous square footage from the note.
        if (m.showFootage) {
          m.note = '';
          m.showFootage = false;
          m.textSource = undefined;
        }
      });

      // Set sqft to note and set animation to true
      updatedMedia[index].note = text;
      updatedMedia[index].showFootage = true;
    } else {
      // All other attributes just set the text.
      updatedMedia[index].note = text;
      updatedMedia[index].showFootage = false;
    }

    updatedMedia[index].textSource = attribute;
    setMedia(updatedMedia);
  }

  useEffect(() => {
    trackCustomizationPageViewed(listings[0], media, autoGenerated, videoUrl);
  }, []);

  const sqftEnabled = isSqftEnabled(media, selectedIndex);

  const selectedCardType = getCardType(media, selectedIndex, preferences);
  const selectedInputValue = getInputValue(listings[0], media, selectedIndex);

  return (
    <>
      {listings.length > 0 && <ListingDetails listing={listings[0]} />}
      <NavBar>
        <Button
          variant="enclosed"
          onClick={(): void => {
            setStage(STAGE.SELECT);
          }}
        >
          Back
        </Button>
        <StepIndicator selectedStep={2} />
        <Button
          variant="solid"
          onClick={(): void => {
            trackVideoCustomized(listings[0], media, music, autoGenerated, videoUrl);
            setStage(STAGE.PROGRESS);
          }}
        >
          Generate
        </Button>
      </NavBar>
      <div css={{ position: 'relative', top: '128px' }}>
        <Panel style={{ left: '0' }}>
          <PanelHeader css={{ borderBottom: '1px solid var(--cx-color-border)' }}>
            Drag and drop to reorder
          </PanelHeader>
          <DndProvider backend={HTML5Backend}>
            {media.map((m, index) => (
              <Draggable
                key={m.originalUrl}
                index={index}
                imageUrl={m.originalUrl!}
                address={address}
                listing={listings[0]}
                media={media}
                preferences={preferences}
                selectedIndex={selectedIndex}
                handleClick={setSelectedIndex}
                handleReorder={handleReorderImage}
                handleRemove={handleRemoveImage}
              />
            ))}
            {preferences.showAgentBranding && (
              <Draggable
                key={media.length}
                index={media.length}
                imageUrl={AGENT_BRANDING_IMAGE_URL}
                agentInfo={agentInfo}
                listing={listings[0]}
                media={media}
                preferences={preferences}
                selectedIndex={selectedIndex}
                handleClick={setSelectedIndex}
                handleRemove={handleRemoveImage}
              />
            )}
            {preferences.showCompassLogo && (
              <Draggable
                key={preferences.showAgentBranding ? media.length + 1 : media.length}
                index={preferences.showAgentBranding ? media.length + 1 : media.length}
                imageUrl={COMPASS_LOGO_IMAGE_URL}
                listing={listings[0]}
                media={media}
                preferences={preferences}
                selectedIndex={selectedIndex}
                handleClick={setSelectedIndex}
                handleRemove={handleRemoveImage}
              />
            )}
          </DndProvider>
        </Panel>
        <h3 className="textIntent-title2" css={{ margin: '40px', textAlign: 'center' }}>
          Add text to customize your video
        </h3>
        {isAddressScreen(selectedIndex) && (
          <>
            <CardPreview
              cardType={CARD_TYPE.IMAGE_WTIH_ADDRESS}
              imageUrl={media[selectedIndex].originalUrl!}
              address={address}
            />
            <Controls>
              <TextField
                value={address.title.replace('\n', ' ')}
                onChange={handleAddressInput}
                css={{ marginBottom: '15px' }}
              />
              <TextField value={address.subtitle} onChange={handleAddressSubtitleInput} />
            </Controls>
          </>
        )}
        {selectedIndex > 0 && selectedIndex < media.length && (
          <>
            <CardPreview
              cardType={selectedCardType}
              imageUrl={media[selectedIndex].originalUrl!}
              text={selectedInputValue}
            />
            <Controls>
              <TextField
                placeholder="Add custom text"
                value={selectedInputValue}
                disabled={sqftEnabled}
                onChange={handleNoteInput}
                data-index={selectedIndex}
                css={{ marginBottom: '15px' }}
              />
              <ListingAttributeDropdown
                index={selectedIndex}
                listing={listings[0]}
                media={media}
                handleSelectAttribute={handleSetAttributeText}
                data-index={selectedIndex}
              />
            </Controls>
          </>
        )}
        {isAgentBrandingScreen(media, selectedIndex, preferences) && (
          <>
            <CardPreview
              cardType={CARD_TYPE.AGENT_BRANDING}
              imageUrl={AGENT_BRANDING_IMAGE_URL}
              agentInfo={agentInfo}
            />
            <Controls>
              <TextField value={agentInfo.name} onChange={handleAgentNameInput} />
              <textarea
                className="cx-textField cx-textField--md"
                value={agentInfo.details}
                onChange={handleAgentDetailsInput}
                css={{
                  height: '106px',
                  lineHeight: '22px',
                  margin: '14px 0',
                  whiteSpace: 'nowrap',
                }}
              />
              <Disclaimer>
                When sharing this video on social, make sure you include all&nbsp;
                <a
                  className="cx-textLink"
                  href={STATE_DISCLOSURES_URL}
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  state-required advertising disclosures
                </a>
                .
              </Disclaimer>
            </Controls>
          </>
        )}
        {isCompassLogoScreen(media, selectedIndex, preferences) && (
          <CardPreview cardType={CARD_TYPE.COMPASS_LOGO} imageUrl={COMPASS_LOGO_IMAGE_URL} />
        )}
        <OptionsPane />
      </div>
    </>
  );
}
