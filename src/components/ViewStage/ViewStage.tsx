import React, { useEffect, useRef, useState } from 'react';
import styled from '@emotion/styled';
import download from 'downloadjs';
import { Button, Toast } from '@uc/cx.react';

import { Header, Centered, ListingDetails, NavBar, StepIndicator } from '@/components/common';
import { createCanvas, updateCanvas } from '@/api';
import {
  CreateCanvasRequest,
  UpdateCanvasRequest,
  GlobalContextValue,
  StateContextValue,
  VideoType,
} from '@/types';
import { useGlobalContext, useStateContext } from '@/hooks';
import {
  createMarketingCenterCanvas,
  getDigitalAdType,
  getVideoTitle,
  trackBackToDigitalAdsClicked,
  trackCreateVideoAdClicked,
  trackDownloadClicked,
  trackDownloadPageViewed,
  trackEditVideoClicked,
  trackStartOverClicked,
  filestackClient,
} from '@/utils';
import { DIGITAL_ADS_PATH, STAGE } from '@/constants';

import { ShareMenuButton } from './ShareMenuButton';

const Column = styled.div`
  margin: auto 60px;
`;
Column.displayName = 'Column';

const SharingTipContainer = styled.div`
  display: flex;
  font: var(--cx-font-shorthandSm);
  flex-wrap: wrap;
  margin: 20px 0;
`;
SharingTipContainer.displayName = 'SharingTipContainer';

const SharingTip = styled.div`
  flex: 0 0 calc(50% - 30px);
  margin-right: 30px;
  margin-top: 30px;
  padding-top: 16px;
  position: relative;
  &:before {
    border-top: 2px solid black;
    content: '';
    left: 0;
    position: absolute;
    top: 0;
    width: 30px;
  }
`;
SharingTip.displayName = 'SharingTip';

const SHARING_TIPS = [
  'Publish videos on Instagram and Facebook to market your listings',
  'Create Virtual Tours to upload to Vimeo/YouTube to publish on MLS',
  'Advertise new listings on social channels to showcase listings',
  'Win listing presentations by showing how other listings were marketed',
];

export function ViewStage(): JSX.Element {
  const { opty = {}, agentInfo, digitalAdId } = useGlobalContext() as GlobalContextValue;
  const {
    listings,
    media = [],
    music,
    address,
    preferences,
    videoUrl,
    canvasId,
    thumbnailUri,
    autoGenerated,
    setStage,
    setListings,
    setMedia,
    setVideoType,
    setListingStatusFilter,
    setCanvasId,
  } = useStateContext() as StateContextValue;
  const [error, setError] = useState('');

  const videoRef = useRef<HTMLVideoElement>(null);

  const videoTitle = getVideoTitle(address);

  const createVideoAdButtonEnabled = !!opty?.features?.video_generator_create_video_ad_button;
  const adType = getDigitalAdType(listings[0]);

  const shareToSocialMediaEnabled = !!opty?.features?.video_generator_share_to_social_media;

  const saveToMarketingCenterEnabled = !!opty?.features?.video_generator_save_to_marketing_center;

  function handleDownload() {
    trackDownloadClicked(listings[0], media, music, autoGenerated, videoUrl);
    fetch(videoUrl!)
      .then((res) => res.blob())
      .then((result) => {
        download(result, `${videoTitle}.mp4`, 'video/mp4');
      });
  }

  useEffect(() => {
    trackDownloadPageViewed(listings[0], media, music, autoGenerated, videoUrl);

    const video = videoRef.current;
    if (video) {
      video.volume = 0.5;
    }

    if (saveToMarketingCenterEnabled) {
      (async () => {
        let thumbnail = Object();
        try {
          if (thumbnailUri != null) {
            thumbnail = await filestackClient.storeURL(thumbnailUri);
          }
        } catch (err) {
          // this is intentionally left blank to accomodate having
          // a silent error case until there is a manual 'Add/Save'
        } finally {
          const canvas = createMarketingCenterCanvas(
            videoTitle,
            listings[0],
            address,
            media,
            music,
            agentInfo,
            preferences,
            thumbnail?.handle || null
          );
          if (canvasId) {
            const request: UpdateCanvasRequest = { canvas };
            updateCanvas(canvasId, request).catch(() => setError('Failed to update video'));
          } else {
            const request: CreateCanvasRequest = { canvas };
            createCanvas(request)
              .then((response) => {
                if (response?.canvas?._id) {
                  setCanvasId(response.canvas._id);
                }
              })
              .catch(() => setError('Failed to save video'));
          }
        }
      })();
    }
  }, []);

  return (
    <>
      {listings.length > 0 && <ListingDetails listing={listings[0]} />}
      <NavBar>
        <Button
          variant="enclosed"
          onClick={() => {
            setStage(STAGE.EDIT);
          }}
          css={{ marginRight: 'auto' }}
        >
          Back
        </Button>
        <StepIndicator selectedStep={3} />
        <Button
          variant="enclosed"
          onClick={(): void => {
            trackStartOverClicked(autoGenerated, videoUrl);
            setStage(STAGE.INPUT);
            setListings([]);
            setMedia([]);
            setVideoType(
              opty?.features?.video_generator_agent_branding_video
                ? VideoType.UNSET
                : VideoType.LISTING
            );
            setCanvasId(null);
            setListingStatusFilter(-1);
          }}
        >
          Start Over
        </Button>
      </NavBar>
      <Centered css={{ display: 'flex', marginTop: '40px' }}>
        <Column css={{ width: '400px' }}>
          <Header className="textIntent-headline1">You&apos;re all done!</Header>
          <div className="textIntent-body">
            Thank you for using the Listing Video Generator! Here are a few tips to help you grow
            your business with your listing video.
          </div>
          <SharingTipContainer>
            {SHARING_TIPS.map((tip: string) => (
              <SharingTip key={tip}>{tip}</SharingTip>
            ))}
          </SharingTipContainer>
          <Button
            variant="solid"
            icon="ArrowLineBelow"
            onClick={handleDownload}
            css={{ marginTop: '40px' }}
          >
            Download
          </Button>
          {shareToSocialMediaEnabled && (
            <ShareMenuButton
              videoUrl={videoUrl!}
              title={videoTitle}
              coverImageUrl={media[0].originalUrl!}
            />
          )}
          {autoGenerated && (
            <Button
              variant="enclosed"
              onClick={() => {
                trackEditVideoClicked(autoGenerated, videoUrl);
                setStage(STAGE.SELECT);
              }}
              css={{ marginLeft: '16px' }}
            >
              Edit Video
            </Button>
          )}
          {digitalAdId && (
            <Button
              variant="naked"
              onClick={() => {
                trackBackToDigitalAdsClicked();
                window.location.href = `${DIGITAL_ADS_PATH}?digitalAdId=${digitalAdId}&listingIdSHA=${listings[0].listingIdSHA}&videoUrl=${videoUrl}`;
              }}
              css={{ display: 'block', marginTop: '24px' }}
            >
              Back to Digital Ads
            </Button>
          )}
          {createVideoAdButtonEnabled && !!adType && !digitalAdId && (
            <Button
              variant="naked"
              onClick={() => {
                trackCreateVideoAdClicked(adType);
                window.location.href = `${DIGITAL_ADS_PATH}?adType=${adType}&listingIdSHA=${listings[0].listingIdSHA}&videoUrl=${videoUrl}`;
              }}
              css={{ display: 'block', marginTop: '24px' }}
            >
              Create a Video Ad
            </Button>
          )}
        </Column>
        <Column>
          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}
          <video ref={videoRef} controls width="500" height="500" autoPlay>
            <source src={videoUrl!} type="video/mp4" />
          </video>
        </Column>
      </Centered>
      {error && (
        <Toast isOpen variant="error">
          {error}
        </Toast>
      )}
    </>
  );
}
